#!/usr/bin/env zsh
# Copyright (c) 2025 [Magnus Henkel]
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

# SSH Context Manager Configuration
if [[ -z "$SSH_CONTEXT" ]]; then
    echo "Error: SSH_CONTEXT environment variable must be set" >&2
    return 1
else
    echo "Using SSH_CONTEXT: $SSH_CONTEXT"
fi

SSH_ROOT="$HOME/.ssh"

function __confirm_overwrite() {
  echo -n "Continue? (y/N) " >&2
  read -r REPLY
  [[ "$REPLY" == "y" ]]
}

function __update_ssh_config {
    local context_dir="$SSH_ROOT/contexts/$SSH_CONTEXT"

    [[ ! -d "$context_dir" ]] && echo "⚠️  Missing context: $context_dir" >&2 && return 1

    cat >"$SSH_ROOT/config" <<EOF
# ===== AUTOGENERATED =====
Include $SSH_ROOT/contexts/$SSH_CONTEXT/config
Host *
  IdentitiesOnly yes
  ServerAliveInterval 60
EOF
}

function __generate_context_config {
    local context="$1"
    local context_dir="$SSH_ROOT/contexts/$context"

    if [[ ! -d "$context_dir" ]]; then
        cat <<EOF >&2
Error: Context directory '$context_dir' doesn't exist.

To create a new context:
1. Create the context directory:
   mkdir -p $context_dir

2. Add your SSH keys to the directory:
   cp /path/to/your/key $context_dir/id_rsa
   cp /path/to/your/key.pub $context_dir/id_rsa.pub

3. Run this command again:
   ssh-context --generate $context
EOF
        return 1
    fi

    local config_file="$context_dir/config"

    if [[ -f "$config_file" ]]; then
        local backup_file="$config_file.backup.$(date +%Y%m%d_%H%M%S)"
        
        echo "⚠️ WARNING: This will overwrite your existing config file!" >&2
        echo "   Original file will be backed up as: $backup_file" >&2
        echo >&2
        echo "The following actions will be performed:" >&2
        echo "1. Backup current config to $backup_file" >&2
        echo "2. Generate a new template config file" >&2
        echo >&2
        echo "To restore your original config later:" >&2
        echo "   cp '$backup_file' '$config_file'" >&2
        echo >&2
        
        echo
        if ! __confirm_overwrite; then
            echo "🚫 Operation cancelled" >&2
            echo "No changes made to $config_file"
            return 1
        fi

        cp "$config_file" "$backup_file"
        echo "📦 Backed up existing config to: $backup_file"
    fi

    cat >"$config_file" <<EOF
# ===== CONTEXT: $context =====
# Auto-generated config for SSH context
EOF

    for key_file in "$context_dir"/id_*(N); do
        [[ ! -f "$key_file" ]] && continue
        [[ "$key_file" == *.pub ]] && continue

        local key_name=$(basename "$key_file")
        local key_path="~/.ssh/contexts/$context/$key_name"

        cat >>"$config_file" <<EOF

# Configuration for key: $key_name
# Host your-server-name
#   HostName your-server.com
#   User your-username
#   IdentityFile $key_path
#   IdentitiesOnly yes

EOF
    done

    echo "✅ Generated config for context '$context' at $config_file"
}

# Main SSH context switching command
function ssh-context {
    if [[ -z "$1" ]]; then
        echo "Current SSH context: $SSH_CONTEXT"
        return 0
    fi

    case "$1" in
    --list|-l)
        local contexts=("$SSH_ROOT/contexts"/*(N))
        
        if (( ${#contexts} == 0 )); then
            echo "No available SSH contexts"
            return 0
        fi

        echo "Available SSH contexts:"
        for ctx in "${contexts[@]}"; do
            [[ -d "$ctx" ]] && echo "  - $(basename "$ctx")"
        done
        return 0
        ;;
    --generate|-g)
        if [[ -z "$2" ]]; then
            echo "Error: Must specify context name to generate" >&2
            return 1
        fi
        __generate_context_config "$2"
        ;;
    --help | -h)
        cat <<EOF
SSH Context Manager

Usage:
  ssh-context                           Show current context
  ssh-context <context-name>            Switch to context
  ssh-context --list, -l                List available contexts
  ssh-context --generate, -g <name>     Generate config template for context
  ssh-context --help, -h                Show this help

Current context: $SSH_CONTEXT
EOF
        ;;
    *)
        if [[ ! -d "$SSH_ROOT/contexts/$1" ]]; then
            echo "Error: Context '$1' doesn't exist (create with --generate)" >&2
            return 1
        fi
        export SSH_CONTEXT="$1"
        __update_ssh_config && echo "➜ Switched to: $SSH_CONTEXT"
        ;;
    esac
}

# Initialize SSH context on startup
if [[ -n "$SSH_CONTEXT" ]]; then
    __update_ssh_config
fi