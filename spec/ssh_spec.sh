Describe 'ZSH Environment'
  It "tests if the shell is set to zsh"
    When call echo "$SHELL"
    The output should equal '/bin/zsh'
  End

  It "tests if the ZSH environment variable is set"
    When call echo "$ZSH"
    The output should equal '/home/vscode/.oh-my-zsh'
  End
End


Describe 'ssh.zsh'
  Include ./zsh/modules/ssh.zsh

  Describe 'Environment Variables'
    It "tests if the SOCK environment variable is set"
      When call echo $SOCK
      The output should equal '/tmp/ssh-agent-vscode-screen'
    End

     It 'tests if the SSH_CONTEXT environment variable is set'
      When call echo $SSH_CONTEXT
      The output should equal 'personal'
    End

    It "tests if DEV_CONTAINER_USER is set correctly"
      When call echo "$DEV_CONTAINER_USER"
      The output should equal 'vscode'
    End

    It "tests if DEFAULT_SSH_CONTEXT is set correctly"
      When call echo "$DEFAULT_SSH_CONTEXT"
      The output should equal 'personal'
    End
  End

  Describe '__get_ssh_root'
    It 'tests __get_ssh_root function in dev container'
      When call __get_ssh_root
      The output should equal '/home/vscode/.ssh'
    End
  End

  Describe '__update_ssh_config'
    setup() {
      SSH_ROOT=$(mktemp -d)
      mkdir -p "$SSH_ROOT/contexts/personal"
      function __get_ssh_root() { echo "$SSH_ROOT"; }
    }
    cleanup() { rm -rf "$SSH_ROOT"; }
    BeforeEach setup
    AfterEach cleanup

    It "creates config file when context exists"
      When call __update_ssh_config
      The path "$SSH_ROOT/config" should be file
      The contents of file "$SSH_ROOT/config" should include '# ===== AUTOGENERATED ====='
      The contents of file "$SSH_ROOT/config" should include 'Include'
      The contents of file "$SSH_ROOT/config" should include 'IdentitiesOnly yes'
      The contents of file "$SSH_ROOT/config" should include 'ServerAliveInterval 60'
      The status should be success
    End

    It "uses the current SSH_CONTEXT"
      export SSH_CONTEXT="personal"
      When call __update_ssh_config
      The contents of file "$SSH_ROOT/config" should include 'contexts/personal/config'
      The status should be success
    End

    It "falls back to DEFAULT_SSH_CONTEXT when SSH_CONTEXT is unset"
      unset SSH_CONTEXT
      When call __update_ssh_config
      The contents of file "$SSH_ROOT/config" should include 'contexts/personal/config'
      The status should be success
    End

    It "fails when context directory doesn't exist"
      rm -rf "$SSH_ROOT/contexts/personal"
      When call __update_ssh_config
      The path "$SSH_ROOT/config" should not be file
      The stderr should include "⚠️  Missing context:"
      The status should be failure
    End

    It "overwrites existing config file"
      echo "old content" > "$SSH_ROOT/config"
      When call __update_ssh_config
      The contents of file "$SSH_ROOT/config" should not include "old content"
      The contents of file "$SSH_ROOT/config" should include '# ===== AUTOGENERATED ====='
      The status should be success
    End
  End

  Describe '__generate_context_config'
    setup() {
      SSH_ROOT=$(mktemp -d)
      mkdir -p "$SSH_ROOT/contexts/newcontext"
      touch "$SSH_ROOT/contexts/newcontext/id_"{rsa,rsa.pub,ed25519}
      function __get_ssh_root() { echo "$SSH_ROOT"; }
    }
    cleanup() { rm -rf "$SSH_ROOT"; }
    BeforeEach setup
    AfterEach cleanup

    It "creates new config with key references when no existing config"
      When call __generate_context_config "newcontext"
      The path "$SSH_ROOT/contexts/newcontext/config" should be file
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should include 'CONTEXT: newcontext'
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should include 'id_rsa'
      The output should include "Generated config for context"
      The status should be success
    End

    It "creates backup when config exists"
      # Create existing config
      echo "original config" > "$SSH_ROOT/contexts/newcontext/config"
      When call __generate_context_config "newcontext"
      # Verify backup was created
      The path "$SSH_ROOT/contexts/newcontext/config.backup"* should be file
      The contents of file "$SSH_ROOT/contexts/newcontext/config.backup"* should include 'original config'
      # Verify new config was created
      The path "$SSH_ROOT/contexts/newcontext/config" should be file
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should include 'CONTEXT: newcontext'
      The output should include "Backed up existing config"
      The output should include "Generated config for context"
      The status should be success
    End

    It "includes all key files in config"
      When call __generate_context_config "newcontext"
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should include 'id_rsa'
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should include 'id_ed25519'
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should not include 'id_rsa.pub'
      The output should include "Generated config for context"
      The status should be success
    End

    It "fails when context directory doesn't exist"
      rm -rf "$SSH_ROOT/contexts/newcontext"
      When call __generate_context_config "newcontext"
      The path "$SSH_ROOT/contexts/newcontext" should not be exist
      The stderr should include "doesn't exist"
      The status should be failure
    End

    It "handles empty key directory gracefully"
      rm -f "$SSH_ROOT/contexts/newcontext"/id_*
      When call __generate_context_config "newcontext"
      The path "$SSH_ROOT/contexts/newcontext/config" should be file
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should include 'CONTEXT: newcontext'
      The contents of file "$SSH_ROOT/contexts/newcontext/config" should not include 'IdentityFile'
      The output should include "Generated config for context"
      The status should be success
    End
  End

  Describe 'ssh-context command'
    setup() {
      SSH_ROOT=$(mktemp -d)
      mkdir -p "$SSH_ROOT/contexts/personal"
      mkdir -p "$SSH_ROOT/contexts/work"
      function __get_ssh_root() { echo "$SSH_ROOT"; }
      function __update_ssh_config() { :; } # Mock to avoid side effects
    }
    cleanup() { rm -rf "$SSH_ROOT"; }
    BeforeEach setup
    AfterEach cleanup

    It "shows current context with no arguments"
      When call ssh-context
      The output should include 'Current SSH context: personal'
      The status should be success
    End

    It "lists available contexts"
      When call ssh-context --list
      The line 1 of output should equal "Available SSH contexts:"
      The output should include 'personal'
      The output should include 'work'
      The status should be success
    End

    It "switches to valid context"
      When call ssh-context work
      The output should include 'Switched to: work'
      The variable SSH_CONTEXT should equal 'work'
      The status should be success
    End

    It "shows help message"
      When call ssh-context --help
      The output should include 'Usage:'
      The status should be success
    End

    It "rejects non-existent contexts with helpful message"
      When call ssh-context missing-context
      The status should be failure
      The stderr should include "doesn't exist"
      The stderr should include "--generate"
      The variable SSH_CONTEXT should not equal "missing-context"
    End

    It "requires argument for --generate"
      When call ssh-context --generate
      The status should be failure
      The stderr should include "Must specify"
    End

    It "handles no contexts gracefully"
      rm -rf "$SSH_ROOT/contexts"/*
      When call ssh-context --list
      The output should equal "No available SSH contexts"
      The status should be success
    End
  End
End