#!/usr/bin/env zsh

# zsh configuration sync and rollback utility
#
# Usage:
#   sync-configs --sync         # Sync development config to ~/.config/zsh
#   sync-configs --rollback     # Rollback to previous backup
#   sync-configs --list         # List available backups
#   sync-configs --help         # Show help message

set -euo pipefail

REPO_NAME="ssh-context-manager"

# Configuration
SOURCE_DIR="/workspaces/${REPO_NAME}/zsh"
TARGET_DIR="${HOME}/.config/zsh"
BACKUP_ROOT="/tmp/zsh-config-backups"

# Ensure target directory exists
mkdir -p "${TARGET_DIR}"

RSYNC_EXCLUDE=(
  '.devcontainer/'
  '.vscode/'
  'plugins-data/'
  'sync-configs'
  '.git/'
  '.gitignore'
  'README.md'
  'LICENSE'
)

# Fix colors - use $'...' for escape sequences
RED=$'\033[0;31m'
GREEN=$'\033[0;32m'
YELLOW=$'\033[1;33m'
BLUE=$'\033[0;34m'
NC=$'\033[0m' # No Color

# Initialize variables
ACTION=""
FORCE=false
VERBOSE=false

show_help() {
  cat <<EOF
${GREEN}zsh Configuration Manager${NC}

${BLUE}Options:${NC}
  ${YELLOW}--sync${NC}         Sync development config to ~/.config/zsh
  ${YELLOW}--rollback${NC}     Rollback to previous backup
  ${YELLOW}--list${NC}         List available backups
  ${YELLOW}--force${NC}        Skip confirmation prompts
  ${YELLOW}--verbose${NC}      Show detailed output
  ${YELLOW}--help${NC}         Display this help and exit

${BLUE}Description:${NC}
  This utility safely manages synchronization between the development zsh
  configuration in /workspace/zsh and the user's ~/.config/zsh directory.
  All operations create backups and never delete development files.

${BLUE}Examples:${NC}
  ${YELLOW}Normal sync${NC} (with confirmation):
    sync-configs --sync

  ${YELLOW}Force rollback${NC} (no confirmation):
    sync-configs --rollback --force

  ${YELLOW}List backups${NC}:
    sync-configs --list
EOF
  exit 0
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
  --install)
    ACTION="install"
    shift
    ;;
  --sync)
    ACTION="sync"
    shift
    ;;
  --rollback)
    ACTION="rollback"
    shift
    ;;
  --list)
    ACTION="list"
    shift
    ;;
  --force)
    FORCE=true
    shift
    ;;
  --verbose)
    VERBOSE=true
    shift
    ;;
  --help | -h)
    show_help
    ;;
  *)
    echo "${RED}Error: Unknown option '$1'${NC}" >&2
    echo "Try 'sync-configs --help' for more information." >&2
    exit 1
    ;;
  esac
done

# Verify action is specified
if [[ -z "$ACTION" ]]; then
  echo "${RED}Error: No action specified${NC}" >&2
  show_help
  exit 1
fi

# Build rsync exclude options
EXCLUDE_OPTS=()
for item in "${RSYNC_EXCLUDE[@]}"; do
  EXCLUDE_OPTS+=(--exclude="${item}")
done

# Rsync command with common options
RSYNC_CMD=("rsync" "-a")
if [[ "$VERBOSE" == true ]]; then
  RSYNC_CMD+=("-v")
fi

# Function to get all backups sorted by date
get_backups() {
  find "${BACKUP_ROOT}" -maxdepth 1 -type d -name '20*' 2>/dev/null | sort -r
}

# Function to get latest backup
get_latest_backup() {
  get_backups | head -n 1
}

# Function to confirm action
confirm_action() {
  if [[ "$FORCE" == true ]]; then
    return 0
  fi

  local message="$1"
  echo -n "${YELLOW}${message} [y/N] ${NC}"
  read -r response
  case "$response" in
  [yY][eE][sS] | [yY])
    return 0
    ;;
  *)
    echo "Aborted."
    exit 0
    ;;
  esac
}

# Function to list backups
list_backups() {
  local backups=($(get_backups))

  if [[ ${#backups[@]} -eq 0 ]]; then
    echo "${YELLOW}No backups available in ${BACKUP_ROOT}${NC}"
    return
  fi

  echo "${BLUE}Available backups:${NC}"
  for backup in "${backups[@]}"; do
    local size=$(du -sh "${backup}" | cut -f1)
    local date=$(basename "${backup}")
    echo "  ${GREEN}${date}${NC} (${size})"
  done
}

# Clean and initialize plugins
init_plugins() {
  local plugins_dir="${TARGET_DIR}/plugins-data"
  local plugins_list=($(find "${SOURCE_DIR}/plugins" -maxdepth 1 -type d ! -name plugins))

  echo "${GREEN}==> Initializing plugins${NC}"
  
  # Clean existing plugin data if force flag is set
  if [[ "$FORCE" == true ]]; then
    echo "${YELLOW}Force-cleaning plugin data...${NC}"
    rm -rf "${plugins_dir}"
  fi

  # Create fresh plugins directory
  mkdir -p "${plugins_dir}"
  
  # Create symlinks for all plugins
  for plugin in "${plugins_list[@]}"; do
    local plugin_name="${plugin##*/}"
    local target_link="${TARGET_DIR}/plugins/${plugin_name}"
    
    echo "${BLUE}Linking plugin: ${plugin_name}${NC}"
    mkdir -p "${plugins_dir}/${plugin_name}"
    ln -sfn "${plugin}" "${target_link}"
  done

  echo "${GREEN}Plugin initialization complete!${NC}"
  echo "Plugins will be cloned fresh on next zsh start"
}

# Main sync function with .zshrc symlink support
sync_config() {
  local backup_dir="${BACKUP_ROOT}/$(date +%Y%m%d_%H%M%S)"
  local zshrc_source="${TARGET_DIR}/.zshrc"
  local zshrc_target="${HOME}/.zshrc"

  echo "${GREEN}==> Starting sync${NC}"
  echo "Source: ${SOURCE_DIR}"
  echo "Target: ${TARGET_DIR}"

  # Verify source exists
  if [[ ! -d "${SOURCE_DIR}" ]]; then
    echo "${RED}Error: Source directory ${SOURCE_DIR} not found${NC}" >&2
    exit 1
  fi

  confirm_action "This will overwrite your current zsh config. Continue?"

  # Create backup directory
  mkdir -p "${backup_dir}"
  echo "${BLUE}Creating backup...${NC}"
  
  # Only try to backup if target exists and isn't empty
  if [[ -d "${TARGET_DIR}" && "$(ls -A ${TARGET_DIR})" ]]; then
    if ! rsync -a "${TARGET_DIR}/" "${backup_dir}/"; then
      echo "${RED}Warning: Failed to create complete backup${NC}" >&2
    fi
  else
    echo "${YELLOW}No existing config to backup${NC}"
  fi

  # Perform sync
  echo "${BLUE}Syncing files...${NC}"
  rsync -a "${EXCLUDE_OPTS[@]}" "${SOURCE_DIR}/" "${TARGET_DIR}/"

  # Create or update .zshrc symlink
  echo "${BLUE}Configuring .zshrc symlink...${NC}"
  if [[ -L "${zshrc_target}" ]]; then
    # Update existing symlink
    ln -sfn "${zshrc_source}" "${zshrc_target}"
  elif [[ ! -e "${zshrc_target}" ]]; then
    # Create new symlink
    ln -s "${zshrc_source}" "${zshrc_target}"
  else
    # Backup existing .zshrc if it's not a symlink
    echo "${YELLOW}Backing up existing .zshrc to ${zshrc_target}.bak${NC}"
    mv "${zshrc_target}" "${zshrc_target}.bak"
    ln -s "${zshrc_source}" "${zshrc_target}"
  fi

  echo "${GREEN}Sync complete!${NC}"
  [[ -d "${backup_dir}" ]] && echo "Backup is available at: ${backup_dir}"
  echo "ZSH config loaded from: ${zshrc_target} -> $(readlink ${zshrc_target})"

  # Initialize plugins 
  if [[ "$ACTION" == "install" ]]; then
    init_plugins
  fi
}

# Install function
install_config() {
  echo "${GREEN}==> Full installation mode${NC}"
  FORCE=true
  sync_config
  init_plugins
}


# Main rollback function
rollback_config() {
  local latest_backup=$(get_latest_backup)

  if [[ -z "$latest_backup" ]]; then
    echo "${RED}Error: No backup found in ${BACKUP_ROOT}${NC}" >&2
    exit 1
  fi

  echo "${GREEN}==> Starting rollback${NC}"
  echo "Backup: ${latest_backup}"
  echo "Target: ${TARGET_DIR}"

  confirm_action "This will overwrite your current zsh config with backup. Continue?"

  # Perform rollback (without --delete to preserve user files)
  echo "${BLUE}Restoring backup...${NC}"
  "${RSYNC_CMD[@]}" "${latest_backup}/" "${TARGET_DIR}/"

  echo "${GREEN}Rollback complete!${NC}"
  echo "Restored from: ${latest_backup}"
}

# Create backup root if it doesn't exist
mkdir -p "${BACKUP_ROOT}"

# Execute requested action
case "$ACTION" in
install)
  install_config
  ;;
sync)
  sync_config
  ;;
rollback)
  rollback_config
  ;;
list)
  list_backups
  ;;
*)
  echo "${RED}Error: Unknown action${NC}" >&2
  exit 1
  ;;
esac

exit 0
