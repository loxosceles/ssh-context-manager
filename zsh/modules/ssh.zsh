#!/usr/bin/env zsh

# SSH agent socket management
SOCK="/tmp/ssh-agent-$USER-screen"
if test $SSH_AUTH_SOCK && [ $SSH_AUTH_SOCK != $SOCK ]; then
    ln -sf $SSH_AUTH_SOCK $SOCK
    export SSH_AUTH_SOCK=$SOCK
fi

# SSH Context Manager Configuration
export SSH_CONTEXT=personal
readonly DEFAULT_SSH_CONTEXT="personal"
readonly DEV_CONTAINER_USER="vscode"

# Core SSH context functions
function __get_ssh_root() {
    if [[ "$(whoami)" == "$DEV_CONTAINER_USER" ]] && [[ -d "/home/$DEV_CONTAINER_USER/.ssh" ]]; then
        echo "/home/$DEV_CONTAINER_USER/.ssh"
    else
        echo "$HOME/.ssh"
    fi
}

function __update_ssh_config {
    local ssh_root=$(__get_ssh_root)
    local context="${SSH_CONTEXT:-$DEFAULT_SSH_CONTEXT}"
    local context_dir="$ssh_root/contexts/$context"

    [[ ! -d "$context_dir" ]] && echo "⚠️  Missing context: $context_dir" >&2 && return 1

    cat >"$ssh_root/config" <<EOF
# ===== AUTOGENERATED =====
Include $ssh_root/contexts/$context/config
Host *
  IdentitiesOnly yes
  ServerAliveInterval 60
EOF
}

function __generate_context_config {
    local context="$1"
    local ssh_root=$(__get_ssh_root)
    local context_dir="$ssh_root/contexts/$context"

    # Validate context directory exists first
    if [[ ! -d "$context_dir" ]]; then
        echo "Error: Context directory '$context_dir' doesn't exist" >&2
        return 1
    fi

    local config_file="$context_dir/config"

    if [[ -f "$config_file" ]]; then
        local backup_file="$config_file.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$config_file" "$backup_file"
        echo "📦 Backed up existing config to: $backup_file"
    fi

    cat >"$config_file" <<EOF
# ===== CONTEXT: $context =====
# Auto-generated config for SSH context
EOF

    for key_file in "$context_dir"/id_*(N); do
        [[ ! -f "$key_file" ]] && continue
        [[ "$key_file" == *.pub ]] && continue

        local key_name=$(basename "$key_file")
        local key_path="~/.ssh/contexts/$context/$key_name"

        cat >>"$config_file" <<EOF

# Configuration for key: $key_name
# Host your-server-name
#   HostName your-server.com
#   User your-username
#   IdentityFile $key_path
#   IdentitiesOnly yes

EOF
    done

    echo "✅ Generated config for context '$context' at $config_file"
}

# Main SSH context switching command
function ssh-context {
    if [[ -z "$1" ]]; then
        echo "Current SSH context: ${SSH_CONTEXT:-$DEFAULT_SSH_CONTEXT}"
        return 0
    fi

    case "$1" in
    --list|-l)
        local ssh_root=$(__get_ssh_root)
        local contexts=("$ssh_root/contexts"/*(N))
        
        if (( ${#contexts} == 0 )); then
            echo "No available SSH contexts"
            return 0
        fi

        echo "Available SSH contexts:"
        for ctx in "${contexts[@]}"; do
            [[ -d "$ctx" ]] && echo "  - $(basename "$ctx")"
        done
        return 0
        ;;
    --generate|-g)
        if [[ -z "$2" ]]; then
            echo "Error: Must specify context name to generate" >&2
            return 1
        fi
        __generate_context_config "$2"
        ;;
    --help | -h)
        cat <<EOF
SSH Context Manager

Usage:
  ssh-context                    Show current context
  ssh-context <context-name>     Switch to context
  ssh-context --list, -l         List available contexts
  ssh-context --generate <name>  Generate config template for context
  ssh-context --help, -h         Show this help

Current context: ${SSH_CONTEXT:-$DEFAULT_SSH_CONTEXT (default)}
EOF
        ;;
    *)
       # Only validate existing contexts in the default case
       local ssh_root=$(__get_ssh_root)
        if [[ ! -d "$ssh_root/contexts/$1" ]]; then
            echo "Error: Context '$1' doesn't exist (create with --generate)" >&2
            return 1
        fi
        export SSH_CONTEXT="$1"
        __update_ssh_config && echo "➜ Switched to: $SSH_CONTEXT"
        ;;
    esac
}

# Initialize SSH context on startup
__update_ssh_config
